## Javascript Snippets
'.source.js':
  'Use Strict':
    'prefix': 'usestrict'
    'body': '"use strict"'
  '=>':
    'prefix': '='
    'body': '=>'
  'break':
    'prefix': 'break'
    'body': 'break'
  'Console Log':
    'prefix': 'cl'
    'body': 'console.log($0)'
  'Console Table':
    'prefix': 'console.table'
    'body': 'console.table($0)'
  'const':
    'prefix': 'const'
    'body': 'const $1 = $2\n$0'
  'Comment':
    'prefix': '/'
    'body': '/*  $0  */'
  'Function':
    'prefix': 'f'
    'body': 'function (${1:args}) {$0}'
  'length':
    'prefix': 'length'
    'body': 'length'
  'Number()':
    'prefix': 'number'
    'body': 'Number($1)'
  'parseFloat()':
    'prefix': 'parseFloat'
    'body': 'parseFloat($1)'
  'parseInt()':
    'prefix': 'parseInt'
    'body': 'parseInt($1)'
  'String()':
    'prefix': 'string'
    'body': 'String($1)'
  'toUpperCase':
    'prefix': 'toUpperCase'
    'body': 'toUpperCase()'
  'toFixed()':
    'prefix': 'tofixed'
    'body': 'toFixed($1)'
  'typeof':
    'prefix': 'typeof'
    'body': 'typeof'
  'server':
    'prefix': 'server'
    'body': """
const http = require('http')

const port = 3000

const requestHandler = (req, res) => {
  console.log(req.url)
}
const server = http.createServer(requestHandler)

server.listen(port, (err) => {
  if (err) {
    return console.log(err)
  }
  console.log(`server is running on ${port}`)
})
$0
"""
  'express':
    'prefix': 'express'
    'body': """
const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('ðŸš€  express up and running')
})

app.listen(port, (err) => {
  if (err) {
    return console.log(err)
  }

  console.log(`ðŸš€  express is running on ${port}`)
})
$0
"""
  'app.use':
    'prefix': 'aus'
    'body': """
app.use((req, res, next) => {
  $0
  next()
})
"""
  'app.use(err)':
    'prefix': 'aerr'
    'body': """
app.use((err, req, res, next) => {
  console.log(err)
  res.status(500).send(err)
})
"""
## Markdown / Jekyll
'.source.gfm':
  'Jekyll Image':
    'prefix': 'jimg'
    'body': '{% include img.html src="$1" type="$2" caption="$3" %}\n$0'

## CSS Snippets

'.source.css':
  'Helvetica':
    'prefix': 'ffshelvetia'
    'body': 'Helvetica, Arial, "Lucida Grande", sans-serif'
  'Helvetica Neue':
    'prefix': 'ffsHelvetica-Neue'
    'body': '"Helvetica Neue", Helvetica, Arial, sans-serif'
  'Optima':
    'prefix': 'ffsOptima'
    'body': 'Optima, Segoe, "Segoe UI", Candara, Calibri, Arial, sans-serif'
  'Futura':
    'prefix': 'ffsFutura'
    'body': 'Futura, "Trebuchet MS", Arial, sans-serif'
  'Gill Sans':
    'prefix': 'ffsGillsans'
    'body': '"Gill Sans", "Gill Sans MT", Calibri, sans-serif'
  'Tahoma, Geneva, Verdana, sans-serif':
    'prefix': 'ffsTahoma'
    'body': 'Tahoma, Geneva, Verdana, sans-serif'
  'Trebuchet':
    'prefix': 'ffsTrebuchet'
    'body': '"Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Tahoma, sans-serif'
  'Verdana':
    'prefix': 'ffsVerdana'
    'body': 'Verdana, Geneva, sans-serif'
  'Lucida':
    'prefix': 'ffsLucida'
    'body': '"Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Verdana, sans-serif'
  'Geneva':
    'prefix': 'ffsGeneva'
    'body': 'Geneva, Tahoma, Verdana, sans-serif'
  'Segoe':
    'prefix': 'ffsSegoe'
    'body': 'Segoe, "Segoe UI", "Helvetica Neue", Arial, sans-serif'
  'Candara':
    'prefix': 'ffsCandara'
    'body': 'Candara, Calibri, Segoe, "Segoe UI", Optima, Arial, sans-serif'
  'Calibri':
    'prefix': 'ffsCalibri'
    'body': 'Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif'
  'Franklin Gothic Medium':
    'prefix': 'ffsFranklin'
    'body': '"Franklin Gothic Medium", Arial, sans-serif'
  'Georgia':
    'prefix': 'ffsGeorgia'
    'body': 'Georgia, "Times New Roman", Times, serif'
  'Garamond':
    'prefix': 'ffsGaramond'
    'body': 'Garamond, Baskerville, "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif'
  'Lucida Bright':
    'prefix': 'ffsLucidaBright'
    'body': '"Lucida Bright", Georgia, serif'
  'Palatino':
    'prefix': 'ffsPalatino'
    'body': 'Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif'
  'Didot':
    'prefix': 'ffsDidot'
    'body': 'Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif'
  'Baskerville':
    'prefix': 'ffsBaskerville'
    'body': 'Baskerville, "Baskerville old face", "Hoefler Text", Garamond, "Times New Roman", serif'
  'Hoefler':
    'prefix': 'ffsHoefler'
    'body': '"Hoefler Text", "Baskerville old face", Garamond, "Times New Roman", serif'
  'Bodoni':
    'prefix': 'ffsBodoni'
    'body': '"Bodoni MT", Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif'
  'Goudy':
    'prefix': 'ffsGoudy'
    'body': '"Goudy Old Style", Garamond, "Big Caslon", "Times New Roman", serif'
  'Constantia':
    'prefix': 'ffsConstantia'
    'body': 'Constantia, Palatino, "Palatino Linotype", "Palatino LT STD", Georgia, serif'
  'Cambria':
    'prefix': 'ffsCambria'
    'body': 'Cambria, Georgia, serif'
  'Book Antiqua':
    'prefix': 'ffsBookAntiqua'
    'body': '"Book Antiqua", Palatino, "Palatino Linotype", "Palatino LT STD", Georgia, serif'
  'Mono':
    'prefix': 'ffsMono'
    'body': '"Andale Mono", Courier, monospace'
